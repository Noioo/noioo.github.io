{"meta":{"title":"Hello World","subtitle":null,"description":null,"author":"Senyag","url":"http://yoursite.com"},"pages":[{"title":"categories","date":"2018-11-08T08:16:57.877Z","updated":"2018-11-08T08:16:57.877Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"","date":"2018-11-08T08:14:04.646Z","updated":"2018-11-08T08:14:04.646Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"spring-ioc-summary","slug":"spring-ioc-summary","date":"2018-11-08T08:24:17.000Z","updated":"2018-11-08T08:40:15.612Z","comments":true,"path":"2018/11/f19b/","link":"","permalink":"http://yoursite.com/2018/11/f19b/","excerpt":"对Spring IoC部分的功能做一个大致的概述, 😋不过不会那么细致, 只涉及常用的功能. 也不过多介绍Spring中的一些概念.","text":"对Spring IoC部分的功能做一个大致的概述, 😋不过不会那么细致, 只涉及常用的功能. 也不过多介绍Spring中的一些概念. Spring Framework | IoCversion spring version: 5.1.1.RELEASE spring-context spring-core spring-beans 示例 从一个简单的示例来入手这个框架, 并尽可能多的贯穿整个框架功能体系. 背景: 让BeanUser, 调用Bean里面的方法. (即BeanUser需要一个Bean实例) bean - Bean.java 12345public class Bean&#123; public void sayHello()&#123; System.out.print(\"Hello\"); &#125;&#125; 一个简单的类, 当然根据实际开发需求, 我们或许需要一个POJO.. bean使用者 - BeanUser.java12345678910public class BeanUser&#123; private Bean bean; public void setBean(Bean bean)&#123; this.bean = bean; &#125; // use bean's method public void useBean()&#123; bean.sayHello(); &#125;&#125; 它通过setBean()函数注入Bean对象, 而这个对象将会由Spring来注入. Spring 配置 - spring-beans.xml1234567&lt;!-- ignore the dtd --&gt;&lt;beans&gt; &lt;bean id=\"bean\" class=\"yag.Bean\"&gt;&lt;/bean&gt; &lt;bean id=\"beanUser\" class=\"yag.BeanUser\"&gt; &lt;property name=\"bean\" ref=\"bean\"/&gt; &lt;/bean&gt;&lt;/beans&gt; 执行者 - Runner.java1234567public void forXmlConfig()&#123; // load the config ApplicationContext context = new ClassPathXmlApplicationContext(\"spring-beans.xml\"); // get bean BeanUser beanUser = (BeanUser)context.getBean(BeanUser.class); beanUser.useBean(); // use bean&#125; 罗列部分代码. 小结从上面看到, 一共四个代码片段, 可以将框架分为三个功能部分来学习: Bean(Bean 和 BeanUser都是Bean) Bean的配置 执行者 要注意的是, 不是说写在XML配置中的就要划分给配置, 有些内容实际上是为其他部分准备的. 这个划分是按照功能来划分的. Bean 部分 了解Bean定义以及一些附加性功能. 要了解Bean, 就需要从依赖入手. 什么是依赖? 简单的说就是需要谁的实例就依赖谁. 依赖注入 - 需要一个Bean实例在示例中所使用的方式是Setter函数注入(又称设值注入, 即通过一个函数的参数来注入), 这种方式源于JavaBean. 还有一种注入称为构造注入, 不过由于Spring的框架”主张”, 它被划分到自动装配中去了. 在BeanUser类中的setter方法一般如下: 12private Bean bean;public void setBean(Bean bean)&#123; this.bean = bean; &#125; 在Spring中的配置有两种: XML和JavaConfig XML Bean定义: &lt;bean id=&quot;bean&quot; class=&quot;yag.Bean&quot;&gt;&lt;/bean&gt; BeanUse注入定义: 123&lt;bean id=\"beanUser\" class=\"yag.BeanUser\"&gt; &lt;property name=\"bean\" ref=\"bean\"/&gt;&lt;/bean&gt; JavaConfig^JavaConfig 自动装配 - 自动注入Bean实例 自动装配指的是自动注入Bean示例. 目的是节约过多的代码量, 有助于Bean的管理. 在Spring中自动装配有三种: byName - 通过注入参数的属性名来匹配Bean id 12345&lt;!-- byName --&gt;&lt;!-- 去掉了property, 新增了属性autowire=\"byName\" --&gt;&lt;bean id=\"beanUser\" class=\"yag.BeanUser\" autowire=\"byName\"&gt; &lt;!-- BeanUser将用属性名来匹配Bean id --&gt;&lt;/bean&gt; byType - 通过注入参数的类型来匹配Bean 类型. 12345&lt;!-- byType --&gt;&lt;bean id=\"beanUser\" class=\"yag.BeanUser\" autowire=\"byType\"&gt; &lt;!-- 它将会以定义的属性值的类型来匹配这里的Bean名 --&gt;&lt;/bean&gt;&lt;!-- 因为是根据类型匹配的, 我们甚至连给这个Bean起id都不用 --&gt; constructor-arg - 构造注入, 指定Bean id 1234&lt;!-- constructor-arg --&gt;&lt;bean class=\"yag.BeanUser\"&gt; &lt;constructor-arg ref=\"bean\"/&gt;&lt;/bean&gt; 限定操作 - 精准匹配到Bean123// on construction method:public BeanUser(@Qualifier(value=\"the_bean_id\")Bean bean)&#123;this.bean=bean;&#125;// on setter method: same as construction method 这个一般用于配合自动装配使用, 当自动装配匹配不到时, 再用这个注解进一步匹配到具体的Bean id. 需要在配置文件中启用注解: &lt;context:annotation-config/&gt; Config 部分Bean的作用域12&lt;bean id=\"...\" class=\"...\" scope=\"&#123;singleton(default)|prototype|request|session|global-session&#125;\"/&gt; 作用域 描述 singleton 在spring IoC容器仅存在一个Bean实例，Bean以单例方式存在，默认值 prototype 每次从容器中调用Bean时，都返回一个新的实例，即每次调用getBean()时，相当于执行newXxxBean() request 每次HTTP请求都会创建一个新的Bean，该作用域仅适用于WebApplicationContext环境 session 同一个HTTP Session共享一个Bean，不同Session使用不同的Bean，仅适用于WebApplicationContext环境 global-session 一般用于Portlet应用环境，该运用域仅适用于WebApplicationContext环境 Bean的继承关系12345678&lt;!-- 父 bean 自身不能被实例化，因为它是不完整的，而且它也被明确地标记为抽象的。--&gt;&lt;bean id=\"beanTeamplate\" abstract=\"true\"&gt; &lt;property name=\"message1\" value=\"Hello World!\"/&gt;&lt;/bean&gt;&lt;bean id=\"helloChina\" class=\"com.Hello\" parent=\"beanTeamplate\"&gt; &lt;property name=\"message1\" value=\"Hello China!\"/&gt;&lt;/bean&gt; 配置importJava Config12345678910import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;@Configurationpublic class JavaConfig&#123; @Bean // or: @Bean(name=\"beanId\") public Bean bean()&#123; return new Bean(); &#125;&#125; Bean类, JavaConfig类都需要被注解 @Configuration 需要在XML配置文件中启用注解: 12&lt;context:annotation-config/&gt;&lt;context:component-scan base-package=\"yag\"/&gt; ImportImport的作用是整合配置文件, 让Runner^Runner只需要加载一个配置文件即可. xml configYou can use the application context constructor to load bean definitions from all these XML fragments. 12345678&lt;beans&gt; &lt;!-- runner just only load this xml file --&gt; &lt;import resource=\"services.xml\"/&gt; &lt;import resource=\"resources/messageSource.xml\"/&gt; &lt;import resource=\"/resources/themeSource.xml\"/&gt; &lt;bean id=\"bean1\" class=\"...\"/&gt; &lt;bean id=\"bean2\" class=\"...\"/&gt;&lt;/beans&gt; java config123456789101112131415161718@Configurationpublic class ConfigA &#123; @Bean public A a() &#123; return new A(); &#125;&#125;@Configuration@Import(ConfigA.class)public class ConfigB &#123; // runner just only load it @Bean public B b() &#123; return new B(); &#125;&#125; Runner 部分1234567891011121314151617import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;import org.springframework.context.annotation.AnnotationConfigApplicationContext;public void forXmlConfig()&#123; ApplicationContext context = new ClassPathXmlApplicationContext(\"spring-beans.xml\"); // get Bean BeanUser beanUser = (BeanUser)context.getBean(BeanUser.class);&#125;public void forJavaConfig()&#123; ApplicationContext context = new AnnotationConfigApplicationContext(JavaConfig.class); // get Bean BeanUser beanUser = (BeanUser)context.getBean(BeanUser.class); //or getBean(\"BeanId\")&#125; 其他内容 JSR-250 JSR-330 关于Bean 容器 Bean Context Factorys","categories":[{"name":"Develop","slug":"Develop","permalink":"http://yoursite.com/categories/Develop/"},{"name":"Java","slug":"Develop/Java","permalink":"http://yoursite.com/categories/Develop/Java/"},{"name":"Code","slug":"Develop/Java/Code","permalink":"http://yoursite.com/categories/Develop/Java/Code/"}],"tags":[{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"},{"name":"spring","slug":"spring","permalink":"http://yoursite.com/tags/spring/"}]}]}